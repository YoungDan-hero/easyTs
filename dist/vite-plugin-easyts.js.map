{"version":3,"sources":["../src/vite-plugin-easyts.ts"],"sourcesContent":["import type { Plugin } from \"vite\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\ninterface TypeDefinition {\n  interfaceName: string;\n  content: string;\n  outputDir?: string;\n  createInCurrentDir?: boolean;\n  currentFilePath?: string;\n}\n\nexport function vitePluginEasyTs(): Plugin {\n  let projectRoot = \"\";\n\n  return {\n    name: \"vite-plugin-easyts\",\n    configureServer(server) {\n      projectRoot = server.config.root;\n\n      // 注册自定义路由处理类型定义的保存\n      server.middlewares.use(\"/__easyts_save\", async (req, res) => {\n        if (req.method === \"POST\") {\n          let body = \"\";\n          req.on(\"data\", (chunk) => {\n            body += chunk.toString();\n          });\n\n          req.on(\"end\", () => {\n            try {\n              const {\n                interfaceName,\n                content,\n                outputDir = \"EasyTsApi\",\n                createInCurrentDir = false,\n                currentFilePath = \"\",\n              }: TypeDefinition = JSON.parse(body);\n\n              let targetDir: string;\n              let filePath: string;\n\n              if (createInCurrentDir && currentFilePath) {\n                // 如果指定了在当前目录创建，使用当前文件的目录\n                targetDir = path.dirname(\n                  path.join(projectRoot, currentFilePath)\n                );\n                filePath = path.join(targetDir, `${interfaceName}.d.ts`);\n              } else {\n                // 否则使用默认的 src/outputDir 目录\n                const srcDir = path.join(projectRoot, \"src\");\n                if (!fs.existsSync(srcDir)) {\n                  throw new Error(`src directory not found in ${projectRoot}`);\n                }\n                targetDir = path.join(srcDir, outputDir);\n                filePath = path.join(targetDir, `${interfaceName}.ts`);\n              }\n\n              // 确保目标目录存在\n              if (!fs.existsSync(targetDir)) {\n                fs.mkdirSync(targetDir, { recursive: true });\n              }\n\n              // 保存类型定义文件\n              fs.writeFileSync(filePath, content);\n\n              // 只有在非当前目录模式下才更新 index.ts\n              if (!createInCurrentDir) {\n                const indexPath = path.join(targetDir, \"index.ts\");\n                const exportStatement = `export * from './${interfaceName}';\\n`;\n\n                if (!fs.existsSync(indexPath)) {\n                  fs.writeFileSync(\n                    indexPath,\n                    \"// Auto-generated type definitions\\n\"\n                  );\n                }\n\n                const indexContent = fs.readFileSync(indexPath, \"utf-8\");\n                if (!indexContent.includes(exportStatement)) {\n                  fs.appendFileSync(indexPath, exportStatement);\n                }\n              }\n\n              const relativePath = path.relative(projectRoot, filePath);\n              console.log(`✨ Generated type definition: ${relativePath}`);\n\n              res.statusCode = 200;\n              res.end(\n                JSON.stringify({\n                  success: true,\n                  path: relativePath,\n                })\n              );\n            } catch (error) {\n              console.error(\"Error saving type definition:\", error);\n              res.statusCode = 500;\n              res.end(\n                JSON.stringify({\n                  error: String(error),\n                  projectRoot,\n                  currentDir: process.cwd(),\n                })\n              );\n            }\n          });\n        } else {\n          res.statusCode = 405;\n          res.end(\"Method not allowed\");\n        }\n      });\n    },\n  };\n}\n"],"mappings":";AACA,YAAY,QAAQ;AACpB,YAAY,UAAU;AAUf,SAAS,mBAA2B;AACzC,MAAI,cAAc;AAElB,SAAO;AAAA,IACL,MAAM;AAAA,IACN,gBAAgB,QAAQ;AACtB,oBAAc,OAAO,OAAO;AAG5B,aAAO,YAAY,IAAI,kBAAkB,OAAO,KAAK,QAAQ;AAC3D,YAAI,IAAI,WAAW,QAAQ;AACzB,cAAI,OAAO;AACX,cAAI,GAAG,QAAQ,CAAC,UAAU;AACxB,oBAAQ,MAAM,SAAS;AAAA,UACzB,CAAC;AAED,cAAI,GAAG,OAAO,MAAM;AAClB,gBAAI;AACF,oBAAM;AAAA,gBACJ;AAAA,gBACA;AAAA,gBACA,YAAY;AAAA,gBACZ,qBAAqB;AAAA,gBACrB,kBAAkB;AAAA,cACpB,IAAoB,KAAK,MAAM,IAAI;AAEnC,kBAAI;AACJ,kBAAI;AAEJ,kBAAI,sBAAsB,iBAAiB;AAEzC,4BAAiB;AAAA,kBACV,UAAK,aAAa,eAAe;AAAA,gBACxC;AACA,2BAAgB,UAAK,WAAW,GAAG,aAAa,OAAO;AAAA,cACzD,OAAO;AAEL,sBAAM,SAAc,UAAK,aAAa,KAAK;AAC3C,oBAAI,CAAI,cAAW,MAAM,GAAG;AAC1B,wBAAM,IAAI,MAAM,8BAA8B,WAAW,EAAE;AAAA,gBAC7D;AACA,4BAAiB,UAAK,QAAQ,SAAS;AACvC,2BAAgB,UAAK,WAAW,GAAG,aAAa,KAAK;AAAA,cACvD;AAGA,kBAAI,CAAI,cAAW,SAAS,GAAG;AAC7B,gBAAG,aAAU,WAAW,EAAE,WAAW,KAAK,CAAC;AAAA,cAC7C;AAGA,cAAG,iBAAc,UAAU,OAAO;AAGlC,kBAAI,CAAC,oBAAoB;AACvB,sBAAM,YAAiB,UAAK,WAAW,UAAU;AACjD,sBAAM,kBAAkB,oBAAoB,aAAa;AAAA;AAEzD,oBAAI,CAAI,cAAW,SAAS,GAAG;AAC7B,kBAAG;AAAA,oBACD;AAAA,oBACA;AAAA,kBACF;AAAA,gBACF;AAEA,sBAAM,eAAkB,gBAAa,WAAW,OAAO;AACvD,oBAAI,CAAC,aAAa,SAAS,eAAe,GAAG;AAC3C,kBAAG,kBAAe,WAAW,eAAe;AAAA,gBAC9C;AAAA,cACF;AAEA,oBAAM,eAAoB,cAAS,aAAa,QAAQ;AACxD,sBAAQ,IAAI,qCAAgC,YAAY,EAAE;AAE1D,kBAAI,aAAa;AACjB,kBAAI;AAAA,gBACF,KAAK,UAAU;AAAA,kBACb,SAAS;AAAA,kBACT,MAAM;AAAA,gBACR,CAAC;AAAA,cACH;AAAA,YACF,SAAS,OAAO;AACd,sBAAQ,MAAM,iCAAiC,KAAK;AACpD,kBAAI,aAAa;AACjB,kBAAI;AAAA,gBACF,KAAK,UAAU;AAAA,kBACb,OAAO,OAAO,KAAK;AAAA,kBACnB;AAAA,kBACA,YAAY,QAAQ,IAAI;AAAA,gBAC1B,CAAC;AAAA,cACH;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH,OAAO;AACL,cAAI,aAAa;AACjB,cAAI,IAAI,oBAAoB;AAAA,QAC9B;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF;","names":[]}