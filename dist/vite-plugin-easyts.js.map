{"version":3,"sources":["../src/vite-plugin-easyts.ts"],"sourcesContent":["import type { Plugin } from \"vite\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\ninterface TypeDefinition {\n  interfaceName: string;\n  content: string;\n  outputDir?: string;\n}\n\nexport function vitePluginEasyTs(): Plugin {\n  let projectRoot = \"\";\n\n  return {\n    name: \"vite-plugin-easyts\",\n    configureServer(server) {\n      projectRoot = server.config.root;\n      console.log(\"Project root:\", projectRoot); // 调试日志\n\n      // 注册自定义路由处理类型定义的保存\n      server.middlewares.use(\"/__easyts_save\", async (req, res) => {\n        if (req.method === \"POST\") {\n          let body = \"\";\n          req.on(\"data\", (chunk) => {\n            body += chunk.toString();\n          });\n\n          req.on(\"end\", () => {\n            try {\n              const {\n                interfaceName,\n                content,\n                outputDir = \"EasyTsApi\",\n              }: TypeDefinition = JSON.parse(body);\n\n              // 使用 Vite 的项目根目录\n              const srcDir = path.join(projectRoot, \"src\");\n              console.log(\"Src directory:\", srcDir); // 调试日志\n\n              if (!fs.existsSync(srcDir)) {\n                throw new Error(`src directory not found in ${projectRoot}`);\n              }\n\n              // 在src目录下创建输出目录\n              const fullOutputDir = path.join(srcDir, outputDir);\n              console.log(\"Output directory:\", fullOutputDir); // 调试日志\n\n              // 确保输出目录存在\n              if (!fs.existsSync(fullOutputDir)) {\n                fs.mkdirSync(fullOutputDir, { recursive: true });\n              }\n\n              // 保存类型定义文件\n              const filePath = path.join(fullOutputDir, `${interfaceName}.ts`);\n              fs.writeFileSync(filePath, content);\n              console.log(\"Type definition file:\", filePath); // 调试日志\n\n              // 更新 index.ts\n              const indexPath = path.join(fullOutputDir, \"index.ts\");\n              const exportStatement = `export * from './${interfaceName}';\\n`;\n\n              if (!fs.existsSync(indexPath)) {\n                fs.writeFileSync(\n                  indexPath,\n                  \"// Auto-generated type definitions\\n\"\n                );\n              }\n\n              const indexContent = fs.readFileSync(indexPath, \"utf-8\");\n              if (!indexContent.includes(exportStatement)) {\n                fs.appendFileSync(indexPath, exportStatement);\n              }\n\n              const relativePath = path.relative(srcDir, filePath);\n              console.log(`✨ Generated type definition: src/${relativePath}`);\n\n              res.statusCode = 200;\n              res.end(\n                JSON.stringify({\n                  success: true,\n                  path: `src/${relativePath}`,\n                })\n              );\n            } catch (error) {\n              console.error(\"Error saving type definition:\", error);\n              res.statusCode = 500;\n              res.end(\n                JSON.stringify({\n                  error: String(error),\n                  projectRoot,\n                  currentDir: process.cwd(),\n                })\n              );\n            }\n          });\n        } else {\n          res.statusCode = 405;\n          res.end(\"Method not allowed\");\n        }\n      });\n    },\n  };\n}\n"],"mappings":";AACA,YAAY,QAAQ;AACpB,YAAY,UAAU;AAQf,SAAS,mBAA2B;AACzC,MAAI,cAAc;AAElB,SAAO;AAAA,IACL,MAAM;AAAA,IACN,gBAAgB,QAAQ;AACtB,oBAAc,OAAO,OAAO;AAC5B,cAAQ,IAAI,iBAAiB,WAAW;AAGxC,aAAO,YAAY,IAAI,kBAAkB,OAAO,KAAK,QAAQ;AAC3D,YAAI,IAAI,WAAW,QAAQ;AACzB,cAAI,OAAO;AACX,cAAI,GAAG,QAAQ,CAAC,UAAU;AACxB,oBAAQ,MAAM,SAAS;AAAA,UACzB,CAAC;AAED,cAAI,GAAG,OAAO,MAAM;AAClB,gBAAI;AACF,oBAAM;AAAA,gBACJ;AAAA,gBACA;AAAA,gBACA,YAAY;AAAA,cACd,IAAoB,KAAK,MAAM,IAAI;AAGnC,oBAAM,SAAc,UAAK,aAAa,KAAK;AAC3C,sBAAQ,IAAI,kBAAkB,MAAM;AAEpC,kBAAI,CAAI,cAAW,MAAM,GAAG;AAC1B,sBAAM,IAAI,MAAM,8BAA8B,WAAW,EAAE;AAAA,cAC7D;AAGA,oBAAM,gBAAqB,UAAK,QAAQ,SAAS;AACjD,sBAAQ,IAAI,qBAAqB,aAAa;AAG9C,kBAAI,CAAI,cAAW,aAAa,GAAG;AACjC,gBAAG,aAAU,eAAe,EAAE,WAAW,KAAK,CAAC;AAAA,cACjD;AAGA,oBAAM,WAAgB,UAAK,eAAe,GAAG,aAAa,KAAK;AAC/D,cAAG,iBAAc,UAAU,OAAO;AAClC,sBAAQ,IAAI,yBAAyB,QAAQ;AAG7C,oBAAM,YAAiB,UAAK,eAAe,UAAU;AACrD,oBAAM,kBAAkB,oBAAoB,aAAa;AAAA;AAEzD,kBAAI,CAAI,cAAW,SAAS,GAAG;AAC7B,gBAAG;AAAA,kBACD;AAAA,kBACA;AAAA,gBACF;AAAA,cACF;AAEA,oBAAM,eAAkB,gBAAa,WAAW,OAAO;AACvD,kBAAI,CAAC,aAAa,SAAS,eAAe,GAAG;AAC3C,gBAAG,kBAAe,WAAW,eAAe;AAAA,cAC9C;AAEA,oBAAM,eAAoB,cAAS,QAAQ,QAAQ;AACnD,sBAAQ,IAAI,yCAAoC,YAAY,EAAE;AAE9D,kBAAI,aAAa;AACjB,kBAAI;AAAA,gBACF,KAAK,UAAU;AAAA,kBACb,SAAS;AAAA,kBACT,MAAM,OAAO,YAAY;AAAA,gBAC3B,CAAC;AAAA,cACH;AAAA,YACF,SAAS,OAAO;AACd,sBAAQ,MAAM,iCAAiC,KAAK;AACpD,kBAAI,aAAa;AACjB,kBAAI;AAAA,gBACF,KAAK,UAAU;AAAA,kBACb,OAAO,OAAO,KAAK;AAAA,kBACnB;AAAA,kBACA,YAAY,QAAQ,IAAI;AAAA,gBAC1B,CAAC;AAAA,cACH;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH,OAAO;AACL,cAAI,aAAa;AACjB,cAAI,IAAI,oBAAoB;AAAA,QAC9B;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF;","names":[]}