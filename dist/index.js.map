{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\n\ninterface EasyTsConfig {\n  /**\n   * 输出目录，相对于项目的src目录\n   * 默认为 'EasyTsApi'，最终会生成在 src/EasyTsApi 目录下\n   */\n  outputDir?: string;\n\n  /**\n   * 可选的 axios 实例\n   * 如果不提供，将创建一个新的实例\n   */\n  axios?: AxiosInstance;\n}\n\n// 类型定义\nexport type TypeFromData<T> = {\n  [K in keyof T]: T[K] extends Array<infer U>\n    ? Array<TypeFromData<U>>\n    : T[K] extends object\n    ? TypeFromData<T[K]>\n    : T[K];\n};\n\nclass EasyTs {\n  private axios: AxiosInstance;\n  private typeCache: Set<string> = new Set();\n  private outputDir: string;\n\n  constructor(config: EasyTsConfig = {}) {\n    this.axios = config.axios || axios.create();\n    this.outputDir = config.outputDir || \"EasyTsApi\";\n  }\n\n  /**\n   * 从API路径生成接口名称\n   */\n  private generateInterfaceName(url: string): string {\n    const cleanUrl = url.split(\"?\")[0];\n    const parts = cleanUrl.split(\"/\").filter(Boolean);\n    const name = parts\n      .map((part) =>\n        part\n          .split(\"-\")\n          .map(\n            (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n          )\n          .join(\"\")\n      )\n      .join(\"\");\n\n    return `I${name}Response`;\n  }\n\n  /**\n   * 根据传入的数据生成 TypeScript 接口定义\n   * @param data 要生成接口的数据\n   * @param interfaceName 可选的接口名称，如果不提供将生成默认名称\n   * @returns 生成的 TypeScript 接口定义字符串\n   */\n  public generateInterface(data: any, interfaceName?: string): string {\n    const name = interfaceName || \"IGeneratedInterface\";\n    return this.generateTypeDefinition(data, name);\n  }\n\n  /**\n   * 生成TypeScript接口定义\n   */\n  private generateTypeDefinition(data: any, interfaceName: string): string {\n    const seen = new Set();\n    let interfaces: string[] = [];\n\n    const generateType = (value: any, name: string): string => {\n      if (seen.has(value)) {\n        return \"any\"; // 避免循环引用\n      }\n\n      if (value === null) return \"null\";\n      if (Array.isArray(value)) {\n        if (value.length === 0) return \"any[]\";\n        const itemType = generateType(value[0], `${name}Item`);\n        return `${itemType}[]`;\n      }\n\n      switch (typeof value) {\n        case \"string\":\n          return \"string\";\n        case \"number\":\n          return Number.isInteger(value) ? \"number\" : \"number\";\n        case \"boolean\":\n          return \"boolean\";\n        case \"object\": {\n          seen.add(value);\n          const subInterfaceName = `I${name}`;\n\n          // 为复杂对象生成子接口\n          if (Object.keys(value).length > 0) {\n            const properties = Object.entries(value)\n              .map(([key, val]) => {\n                const propType = generateType(\n                  val,\n                  `${name}${key.charAt(0).toUpperCase()}${key.slice(1)}`\n                );\n                return `  ${key}: ${propType};`;\n              })\n              .join(\"\\n\");\n\n            // 只有当对象有属性时才生成子接口\n            if (name !== interfaceName.replace(/^I/, \"\")) {\n              interfaces.push(\n                `export interface ${subInterfaceName} {\\n${properties}\\n}`\n              );\n              return subInterfaceName;\n            } else {\n              return `{\\n${properties}\\n}`;\n            }\n          }\n          return \"{}\";\n        }\n        default:\n          return \"any\";\n      }\n    };\n\n    const mainInterface = `export interface ${interfaceName} ${generateType(\n      data,\n      interfaceName.replace(/^I/, \"\")\n    )}`;\n\n    // 返回所有生成的接口定义，包括子接口\n    return [...interfaces, mainInterface].join(\"\\n\\n\");\n  }\n\n  /**\n   * 保存类型定义\n   */\n  private async saveTypeDefinition(\n    interfaceName: string,\n    typeDefinition: string\n  ): Promise<void> {\n    try {\n      const response = await fetch(\"/__easyts_save\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          interfaceName,\n          content: typeDefinition,\n          outputDir: this.outputDir,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save type definition\");\n      }\n    } catch (error) {\n      console.error(\"Error saving type definition:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * 开始监听API响应\n   */\n  public start(): void {\n    this.axios.interceptors.response.use(\n      async (response: AxiosResponse) => {\n        try {\n          const interfaceName = this.generateInterfaceName(\n            response.config.url || \"\"\n          );\n          const typeDefinition = this.generateTypeDefinition(\n            response.data,\n            interfaceName\n          );\n\n          if (!this.typeCache.has(interfaceName)) {\n            await this.saveTypeDefinition(interfaceName, typeDefinition);\n            this.typeCache.add(interfaceName);\n          }\n        } catch (error) {\n          console.error(\"EasyTs: Error generating type definition:\", error);\n        }\n        return response;\n      },\n      (error) => Promise.reject(error)\n    );\n  }\n\n  /**\n   * 获取axios实例\n   */\n  public getAxiosInstance(): AxiosInstance {\n    return this.axios;\n  }\n\n  /**\n   * 直接获取数据的类型定义\n   * @template T 数据类型\n   * @param data 要生成类型的数据\n   * @returns 类型接口\n   */\n  public type<T>(data: T): TypeFromData<T> {\n    return {} as TypeFromData<T>;\n  }\n}\n\n// 导出工具类型\nexport type Type<T> = TypeFromData<T>;\n\nexport const createEasyTs = (config?: EasyTsConfig): EasyTs => {\n  return new EasyTs(config);\n};\n"],"mappings":"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","names":[]}