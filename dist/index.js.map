{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\n\ninterface EasyTsConfig {\n  /**\n   * 输出目录，相对于项目的src目录\n   * 默认为 'EasyTsApi'，最终会生成在 src/EasyTsApi 目录下\n   */\n  outputDir?: string;\n\n  /**\n   * 可选的 axios 实例\n   * 如果不提供，将创建一个新的实例\n   */\n  axios?: AxiosInstance;\n}\n\n// 类型定义\nexport type Type<T> = {\n  [K in keyof T]: T[K] extends Array<infer U>\n    ? Array<Type<U>>\n    : T[K] extends object\n    ? Type<T[K]>\n    : T[K];\n};\n\nclass EasyTs {\n  private axios: AxiosInstance;\n  private typeCache: Map<string, string> = new Map();\n  private outputDir: string;\n\n  constructor(config: EasyTsConfig = {}) {\n    this.axios = config.axios || axios.create();\n    this.outputDir = config.outputDir || \"EasyTsApi\";\n  }\n\n  /**\n   * 计算数据的哈希值，用于检测变化\n   */\n  private calculateHash(data: any): string {\n    return JSON.stringify(data);\n  }\n\n  /**\n   * 检查数据是否发生变化\n   */\n  private hasDataChanged(interfaceName: string, newData: any): boolean {\n    const newHash = this.calculateHash(newData);\n    const oldHash = this.typeCache.get(interfaceName);\n    \n    if (oldHash !== newHash) {\n      this.typeCache.set(interfaceName, newHash);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 从API路径生成接口名称（用作文件名）\n   * @param url API路径\n   * @param method 请求方法\n   * @returns 生成的接口名称\n   */\n  private generateInterfaceName(url: string, method: string = 'get'): string {\n    // 移除查询参数\n    const cleanUrl = url.split('?')[0];\n    \n    // 分割路径并过滤空值\n    const parts = cleanUrl.split('/').filter(Boolean);\n    \n    // 替换动态参数为通用标识符\n    const processedParts = parts.map(part => {\n      // 检测是否为动态参数 (例如: ${xxx} 或 :xxx 或纯数字)\n      if (part.includes('${') || \n          part.startsWith(':') || \n          /^\\d+$/.test(part)) {  // 添加对纯数字的检测\n        return 'ById';\n      }\n      return part;\n    });\n\n    // 只取最后两个有意义的部分（排除api、v1等通用前缀）\n    const meaningfulParts = processedParts.filter(part => \n      !['api', 'v1', 'v2', 'v3'].includes(part.toLowerCase())\n    );\n    \n    const lastParts = meaningfulParts.slice(-2);\n    \n    // 转换为驼峰命名\n    const name = lastParts.map((part) =>\n      part\n        .split('-')\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n        .join('')\n    ).join('');\n\n    // 添加请求方法前缀，用于文件名\n    return `${name}${method.toUpperCase()}`;\n  }\n\n  /**\n   * 根据传入的数据生成 TypeScript 接口定义\n   * @param data 要生成接口的数据\n   * @param interfaceName 可选的接口名称，如果不提供将生成默认名称\n   * @returns 生成的 TypeScript 接口定义字符串\n   */\n  public generateInterface(data: any, interfaceName?: string): string {\n    const name = interfaceName || \"IGeneratedInterface\";\n    return this.generateTypeDefinition(data, name);\n  }\n\n  /**\n   * 生成TypeScript接口定义\n   */\n  private generateTypeDefinition(data: any, interfaceName: string): string {\n    const seen = new Set();\n    let interfaces: string[] = [];\n\n    const generateType = (value: any, name: string): string => {\n      if (seen.has(value)) {\n        return \"any\"; // 避免循环引用\n      }\n\n      if (value === null) return \"null\";\n      if (Array.isArray(value)) {\n        if (value.length === 0) return \"any[]\";\n        // 对于数组，使用Item后缀\n        const itemType = generateType(value[0], `${name}Item`);\n        return `${itemType}[]`;\n      }\n\n      switch (typeof value) {\n        case \"string\":\n          return \"string\";\n        case \"number\":\n          return Number.isInteger(value) ? \"number\" : \"number\";\n        case \"boolean\":\n          return \"boolean\";\n        case \"object\": {\n          seen.add(value);\n          \n          // 直接使用字段名作为接口名称，首字母大写\n          const subInterfaceName = name.charAt(0).toUpperCase() + name.slice(1);\n\n          // 为复杂对象生成子接口\n          if (Object.keys(value).length > 0) {\n            const properties = Object.entries(value)\n              .map(([key, val]) => {\n                const propType = generateType(\n                  val,\n                  key // 直接使用字段名作为子接口的名称基础\n                );\n                return `  ${key}: ${propType};`;\n              })\n              .join(\"\\n\");\n\n            // 只有当对象有属性时才生成子接口\n            if (name !== 'data') { // 修改这里，检查是否为主接口\n              interfaces.push(\n                `export interface ${subInterfaceName} {\\n${properties}\\n}`\n              );\n              return subInterfaceName;\n            } else {\n              return `{\\n${properties}\\n}`;\n            }\n          }\n          return \"{}\";\n        }\n        default:\n          return \"any\";\n      }\n    };\n\n    // 主接口统一命名为 Data\n    const mainInterface = `export interface Data ${generateType(data, 'data')}`;\n\n    // 返回所有生成的接口定义，包括子接口\n    return [...interfaces, mainInterface].join(\"\\n\\n\");\n  }\n\n  /**\n   * 保存类型定义\n   */\n  private async saveTypeDefinition(\n    interfaceName: string,\n    typeDefinition: string\n  ): Promise<void> {\n    try {\n      const response = await fetch(\"/__easyts_save\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          interfaceName,\n          content: typeDefinition,\n          outputDir: this.outputDir,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save type definition\");\n      }\n    } catch (error) {\n      console.error(\"Error saving type definition:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * 开始监听API响应\n   */\n  public start(): void {\n    this.axios.interceptors.response.use(\n      async (response: AxiosResponse) => {\n        try {\n          const interfaceName = this.generateInterfaceName(\n            response.config.url || '',\n            response.config.method || 'get'\n          );\n          \n          // 检查数据是否发生变化\n          if (!this.typeCache.has(interfaceName) || this.hasDataChanged(interfaceName, response.data)) {\n            const typeDefinition = this.generateTypeDefinition(\n              response.data,\n              interfaceName\n            );\n            await this.saveTypeDefinition(interfaceName, typeDefinition);\n            console.log(`[EasyTs] Updated type definition for ${interfaceName}`);\n          }\n        } catch (error) {\n          console.error('EasyTs: Error generating type definition:', error);\n        }\n        return response;\n      },\n      (error) => Promise.reject(error)\n    );\n  }\n\n  /**\n   * 强制更新指定接口的类型定义\n   * @param url 接口地址\n   * @param method 请求方法\n   * @param data 接口返回数据\n   */\n  public async forceUpdate(url: string, method: string = 'get', data: any): Promise<void> {\n    try {\n      const interfaceName = this.generateInterfaceName(url, method);\n      const typeDefinition = this.generateTypeDefinition(data, interfaceName);\n      await this.saveTypeDefinition(interfaceName, typeDefinition);\n      // 更新缓存\n      this.typeCache.set(interfaceName, this.calculateHash(data));\n      console.log(`[EasyTs] Force updated type definition for ${interfaceName}`);\n    } catch (error) {\n      console.error('EasyTs: Error force updating type definition:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取axios实例\n   */\n  public getAxiosInstance(): AxiosInstance {\n    return this.axios;\n  }\n\n  /**\n   * 直接获取数据的类型定义\n   * @template T 数据类型\n   * @param data 要生成类型的数据\n   * @returns 类型接口\n   */\n  public type<T>(data: T): Type<T> {\n    return {} as Type<T>;\n  }\n}\n\n/**\n * 直接生成接口定义\n * @param data 要生成接口的数据\n * @returns 接口定义字符串\n */\nexport function getInterface(data: any): string {\n  const easyTs = new EasyTs();\n  return easyTs.generateInterface(data);\n}\n\nexport const createEasyTs = (config?: EasyTsConfig): EasyTs => {\n  return new EasyTs(config);\n};\n\n/**\n * 将接口定义字符串转换为可用的类型定义文件\n * @param interfaceString 接口定义字符串\n * @param fileName 文件名（可选，默认为 'types'）\n * @returns Promise<string> 返回生成的类型文件路径\n */\nexport async function createTypeDefinition(\n  interfaceString: string,\n  fileName: string = \"types\"\n): Promise<string> {\n  try {\n    const response = await fetch(\"/__easyts_save\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        interfaceName: fileName,\n        content: interfaceString,\n        outputDir: \"types\",\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to create type definition\");\n    }\n\n    return `types/${fileName}.d.ts`;\n  } catch (error) {\n    console.error(\"Error creating type definition:\", error);\n    throw error;\n  }\n}\n\n/**\n * 快速从数据生成类型定义并保存到当前目录\n * @param data 要生成类型的数据\n * @param fileName 保存的文件名（不需要扩展名）\n * @param filePath 当前文件的路径（使用 import.meta.url）\n * @returns Promise<string> 返回生成的类型文件路径\n */\nexport async function createTypeInCurrentDir(\n  data: any,\n  fileName: string,\n  filePath: string\n): Promise<string> {\n  const interfaceString = getInterface(data);\n\n  try {\n    // 将 URL 转换为相对路径\n    const fileUrl = new URL(filePath);\n    const relativePath = fileUrl.pathname;\n\n    const response = await fetch(\"/__easyts_save\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        interfaceName: fileName,\n        content: interfaceString,\n        outputDir: \".\",\n        createInCurrentDir: true,\n        currentFilePath: relativePath,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to create type definition\");\n    }\n\n    const result = await response.json();\n    return result.path;\n  } catch (error) {\n    console.error(\"Error creating type definition:\", error);\n    throw error;\n  }\n}\n"],"mappings":"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","names":[]}