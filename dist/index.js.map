{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\n\ninterface EasyTsConfig {\n  /**\n   * 输出目录，相对于项目的src目录\n   * 默认为 'EasyTsApi'，最终会生成在 src/EasyTsApi 目录下\n   */\n  outputDir?: string;\n\n  /**\n   * 可选的 axios 实例\n   * 如果不提供，将创建一个新的实例\n   */\n  axios?: AxiosInstance;\n}\n\nclass EasyTs {\n  private axios: AxiosInstance;\n  private typeCache: Set<string> = new Set();\n  private outputDir: string;\n\n  constructor(config: EasyTsConfig = {}) {\n    this.axios = config.axios || axios.create();\n    this.outputDir = config.outputDir || \"EasyTsApi\";\n  }\n\n  /**\n   * 从API路径生成接口名称\n   */\n  private generateInterfaceName(url: string): string {\n    const cleanUrl = url.split(\"?\")[0];\n    const parts = cleanUrl.split(\"/\").filter(Boolean);\n    const name = parts\n      .map((part) =>\n        part\n          .split(\"-\")\n          .map(\n            (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\n          )\n          .join(\"\")\n      )\n      .join(\"\");\n\n    return `I${name}Response`;\n  }\n\n  /**\n   * 生成TypeScript接口定义\n   */\n  private generateTypeDefinition(data: any, interfaceName: string): string {\n    const seen = new Set();\n\n    const generateType = (value: any, name: string): string => {\n      if (seen.has(value)) {\n        return \"any\";\n      }\n\n      if (value === null) return \"null\";\n      if (Array.isArray(value)) {\n        if (value.length === 0) return \"any[]\";\n        return `${generateType(value[0], name)}[]`;\n      }\n\n      switch (typeof value) {\n        case \"string\":\n          return \"string\";\n        case \"number\":\n          return \"number\";\n        case \"boolean\":\n          return \"boolean\";\n        case \"object\": {\n          seen.add(value);\n          const properties = Object.entries(value)\n            .map(\n              ([key, val]) =>\n                `  ${key}: ${generateType(\n                  val,\n                  `${name}${key.charAt(0).toUpperCase()}${key.slice(1)}`\n                )};`\n            )\n            .join(\"\\n\");\n          return `{\\n${properties}\\n}`;\n        }\n        default:\n          return \"any\";\n      }\n    };\n\n    return `export interface ${interfaceName} ${generateType(\n      data,\n      interfaceName\n    )}`;\n  }\n\n  /**\n   * 保存类型定义\n   */\n  private async saveTypeDefinition(\n    interfaceName: string,\n    typeDefinition: string\n  ): Promise<void> {\n    try {\n      const response = await fetch(\"/__easyts_save\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          interfaceName,\n          content: typeDefinition,\n          outputDir: this.outputDir,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to save type definition\");\n      }\n    } catch (error) {\n      console.error(\"Error saving type definition:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * 开始监听API响应\n   */\n  public start(): void {\n    this.axios.interceptors.response.use(\n      async (response: AxiosResponse) => {\n        try {\n          const interfaceName = this.generateInterfaceName(\n            response.config.url || \"\"\n          );\n          const typeDefinition = this.generateTypeDefinition(\n            response.data,\n            interfaceName\n          );\n\n          if (!this.typeCache.has(interfaceName)) {\n            await this.saveTypeDefinition(interfaceName, typeDefinition);\n            this.typeCache.add(interfaceName);\n          }\n        } catch (error) {\n          console.error(\"EasyTs: Error generating type definition:\", error);\n        }\n        return response;\n      },\n      (error) => Promise.reject(error)\n    );\n  }\n\n  /**\n   * 获取axios实例\n   */\n  public getAxiosInstance(): AxiosInstance {\n    return this.axios;\n  }\n}\n\nexport const createEasyTs = (config?: EasyTsConfig): EasyTs => {\n  return new EasyTs(config);\n};\n"],"mappings":"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","names":[]}